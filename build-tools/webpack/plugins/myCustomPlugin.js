const fs = require("fs");
const path = require("path");

const pluginName = 'MyCustomPlugin';

// webpack plugin 是一个具有 apply 方法的 JavaScript 对象。apply 方法会被 webpack compiler 调用，并且在 整个 编译生命周期都可以访问 compiler 对象。 
class MyCustomPlugin {
  constructor(options) {
    // 在构造函数中接收插件的选项
    this.options = options || {};
  }

  apply(compiler) {
    // 使用 apply 方法来注册插件
    compiler.hooks.run.tap(pluginName, (compilation) => {
      console.log('webpack 构建正在启动！');
    });
    compiler.hooks.emit.tapAsync(pluginName, (compilation, callback) => {
      // 在 emit 阶段, 将一个自定义文本文件写入到输出目录中(支持自定义)
      const outputPath = this.options.outputPath || "dist";
      const outputFilePath = path.join(outputPath, "custom-file.txt");
      const content = "This is a custom file generated by MyCustomPlugin!";

      fs.writeFileSync(outputFilePath, content);

      callback();
    });
  }
}

module.exports = MyCustomPlugin;
